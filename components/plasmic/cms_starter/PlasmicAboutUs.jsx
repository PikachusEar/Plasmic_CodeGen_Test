// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNceDkVszvmjFS7wKy9BUq
// Component: TGVyZN6Qf1qo
import * as React from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import Popover from "../../Popover"; // plasmic-import: rcl36Lh1kyKB/component
import { useScreenVariants as useScreenVariantsfQq8YbZx1Uu } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fQQ8YbZX_1Uu/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eNceDkVszvmjFS7wKy9BUq/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: TGVyZN6Qf1qo/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: tEXJnTcaiv9_/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: N0xxX2WlXWpR/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: Nd98W7jxpbzJ/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: xbIZeSmoDbb_/icon
import ArrowRightSvgIcon from "./icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: jgpnWHI_U-Yy/icon

createPlasmicElementProxy;

export const PlasmicAboutUs__VariantProps = new Array();

export const PlasmicAboutUs__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutUs__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "popover.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfQq8YbZx1Uu()
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <Stack__
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__qpH0A)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__smEuG)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__emvdp)}
              >
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__aLAci
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  <Icon2Icon
                    className={classNames(projectcss.all, sty.svg__hoQy4)}
                    role={"img"}
                  />
                </PlasmicLink__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__xikgQ)}
                >
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__kKfU
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHomepage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__mU9Z2)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b26RA
                      )}
                    >
                      {"About Us"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___0ZCsq)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__rnObl
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___0HLeA)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xySCj
                      )}
                    >
                      {"Features"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__rec7A)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__bQbEi
                    )}
                    component={Link}
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToHomepage"] = true
                        ? (() => {
                            const actionArgs = { destination: `/` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToHomepage"] != null &&
                        typeof $steps["goToHomepage"] === "object" &&
                        typeof $steps["goToHomepage"].then === "function"
                      ) {
                        $steps["goToHomepage"] = await $steps["goToHomepage"];
                      }
                    }}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___9GcAs)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__weUd7
                      )}
                    >
                      {"Pricing "}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__uFbH)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__iNdn1
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__ph4Yd)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sA4R
                      )}
                    >
                      {"Contact"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__gNkaq)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={PlasmicLink__}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__ls1
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___6LcKp)}
                        role={"img"}
                      />
                    ) : null}
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__x1YJo
                      )}
                    >
                      {"Blog"}
                    </div>
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__j99L1)}
                        role={"img"}
                      />
                    ) : null}
                  </Stack__>
                  <BaseButton
                    className={classNames(
                      "__wab_instance",
                      sty.ariaButton__sASo
                    )}
                    target={$props.openLinkInNewTab ? "_blank" : "_self"}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"softBackground2"}
                        data-plasmic-override={overrides.softBackground2}
                        className={classNames(
                          projectcss.all,
                          sty.softBackground2
                        )}
                      />
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"border2"}
                        data-plasmic-override={overrides.border2}
                        className={classNames(projectcss.all, sty.border2)}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"interactionEffect2"}
                      data-plasmic-override={overrides.interactionEffect2}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect2
                      )}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__whYtA)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jCq6U
                        )}
                      >
                        <CircleIcon
                          className={classNames(projectcss.all, sty.svg__rzhzS)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__e1Mlp
                        )}
                      >
                        {"Get started"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zyBqL
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___7EeiT
                          )}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </BaseButton>
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__t0Znv)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__dKvA4)}
              >
                <div className={classNames(projectcss.all, sty.column__rZqpG)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tUrtn)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"About us"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___91Cs9
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.column__hhCAj)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__cBnYv)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/cms_starter/images/corinneKutzTMi2R5NfoUnsplashJpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </Stack__>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__aavQb)}>
            <section
              data-plasmic-name={"features"}
              data-plasmic-override={overrides.features}
              className={classNames(projectcss.all, sty.features)}
            >
              <div className={classNames(projectcss.all, sty.column__qOgEd)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__uZhma
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "WHY CHOOSE US"
                    : "WHY CHOOSE US"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__pXld5
                  )}
                >
                  {
                    "Lorem Ipsum is simply dummy text of the printing and typesetting industry. \nLorem Ipsum has been the industry's standard dummy text ever since the 1500s"
                  }
                </div>
                <div
                  data-plasmic-name={"container4"}
                  data-plasmic-override={overrides.container4}
                  className={classNames(projectcss.all, sty.container4)}
                >
                  <div
                    data-plasmic-name={"outerRow2"}
                    data-plasmic-override={overrides.outerRow2}
                    className={classNames(projectcss.all, sty.outerRow2)}
                  >
                    <div
                      data-plasmic-name={"row2"}
                      data-plasmic-override={overrides.row2}
                      className={classNames(projectcss.all, sty.row2)}
                    >
                      <div
                        className={classNames(projectcss.all, sty.column__rjXr)}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__opzEc
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___4JB6N
                            )}
                          />

                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__eFl8H
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Some value proposition of your service."
                              : "Some value proposition of your service."}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vnZnU
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                              : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                          </div>
                          <BaseButton
                            className={classNames(
                              "__wab_instance",
                              sty.ariaButton__vkDO
                            )}
                            target={
                              $props.openLinkInNewTab ? "_blank" : "_self"
                            }
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"softBackground3"}
                                data-plasmic-override={
                                  overrides.softBackground3
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.softBackground3
                                )}
                              />
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"border3"}
                                data-plasmic-override={overrides.border3}
                                className={classNames(
                                  projectcss.all,
                                  sty.border3
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"interactionEffect3"}
                              data-plasmic-override={
                                overrides.interactionEffect3
                              }
                              className={classNames(
                                projectcss.all,
                                sty.interactionEffect3
                              )}
                            />

                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__e4Kz
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eAUoU
                                )}
                              >
                                <CircleIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___1KsEb
                                  )}
                                  role={"img"}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__l2CYf
                                )}
                              >
                                {"Learn more"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__lPzUm
                                )}
                              >
                                <ArrowRightSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__euAa3
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </Stack__>
                          </BaseButton>
                        </Stack__>
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__qwrO)}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__bCiDb)}
                          displayHeight={"400px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"400px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/brookeCagleWhwyBmtn30UnsplashJpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"container5"}
                  data-plasmic-override={overrides.container5}
                  className={classNames(projectcss.all, sty.container5)}
                >
                  <div
                    data-plasmic-name={"outerRow3"}
                    data-plasmic-override={overrides.outerRow3}
                    className={classNames(projectcss.all, sty.outerRow3)}
                  >
                    <div
                      data-plasmic-name={"row4"}
                      data-plasmic-override={overrides.row4}
                      className={classNames(projectcss.all, sty.row4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__opSyr
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tZdIp)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "100%"
                              : "100%"
                          }
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "lazy"
                              : "lazy"
                          }
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/cms_starter/images/about2Jpg.jpg",
                                  fullWidth: 570,
                                  fullHeight: 650,
                                  aspectRatio: undefined
                                }
                              : {
                                  src: "/plasmic/cms_starter/images/about2Jpg.jpg",
                                  fullWidth: 570,
                                  fullHeight: 650,
                                  aspectRatio: undefined
                                }
                          }
                        />
                      </div>
                      <div
                        className={classNames(projectcss.all, sty.column__bUqi)}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__hvfyn
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "We Execute Our Ideas \nThe Start To Finish."
                            : "We Execute Our Ideas \nThe Start To Finish."}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oxcAj
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged."
                          }
                        </div>
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__ln0HE
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__eRpDi
                              )}
                              role={"img"}
                            />
                          ) : null}
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___4ZczV
                            )}
                          >
                            {"LEARN More"}
                          </div>
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___2GmyU
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"container6"}
                  data-plasmic-override={overrides.container6}
                  className={classNames(projectcss.all, sty.container6)}
                >
                  <div
                    data-plasmic-name={"outerRow4"}
                    data-plasmic-override={overrides.outerRow4}
                    className={classNames(projectcss.all, sty.outerRow4)}
                  >
                    <div
                      data-plasmic-name={"row3"}
                      data-plasmic-override={overrides.row3}
                      className={classNames(projectcss.all, sty.row3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__g4DaC
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__yOuC5)}
                          displayHeight={"400px"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"none"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"400px"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/reading9255891920Jpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__kftt3
                        )}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__q5Y4Z
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ezM90
                            )}
                          />

                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__gzont
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Some value proposition of your service."
                              : "Some value proposition of your service."}
                          </h3>
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oIyY
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."
                              : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book."}
                          </div>
                          <BaseButton
                            className={classNames(
                              "__wab_instance",
                              sty.ariaButton___0Wq5X
                            )}
                            target={
                              $props.openLinkInNewTab ? "_blank" : "_self"
                            }
                          >
                            {false ? (
                              <div
                                data-plasmic-name={"softBackground4"}
                                data-plasmic-override={
                                  overrides.softBackground4
                                }
                                className={classNames(
                                  projectcss.all,
                                  sty.softBackground4
                                )}
                              />
                            ) : null}
                            {false ? (
                              <div
                                data-plasmic-name={"border4"}
                                data-plasmic-override={overrides.border4}
                                className={classNames(
                                  projectcss.all,
                                  sty.border4
                                )}
                              />
                            ) : null}
                            <div
                              data-plasmic-name={"interactionEffect4"}
                              data-plasmic-override={
                                overrides.interactionEffect4
                              }
                              className={classNames(
                                projectcss.all,
                                sty.interactionEffect4
                              )}
                            />

                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__fWtjg
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mt4PQ
                                )}
                              >
                                <CircleIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__ikBem
                                  )}
                                  role={"img"}
                                />
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__w1QB3
                                )}
                              >
                                {"Learn more"}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__cavo3
                                )}
                              >
                                <ArrowRightSvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___9OBtx
                                  )}
                                  role={"img"}
                                />
                              </div>
                            </Stack__>
                          </BaseButton>
                        </Stack__>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </section>
            <div className={classNames(projectcss.all, sty.freeBox__jNCaL)}>
              <div className={classNames(projectcss.all, sty.columns__zMLhS)}>
                <div className={classNames(projectcss.all, sty.column__i7L0H)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__sMljN
                    )}
                  >
                    {"Make your call to action here."}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__akV9B
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur adipiscing elit."}
                  </div>
                  <BaseButton
                    className={classNames(
                      "__wab_instance",
                      sty.ariaButton__wlSEm
                    )}
                    target={$props.openLinkInNewTab ? "_blank" : "_self"}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"softBackground"}
                        data-plasmic-override={overrides.softBackground}
                        className={classNames(
                          projectcss.all,
                          sty.softBackground
                        )}
                      />
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"border"}
                        data-plasmic-override={overrides.border}
                        className={classNames(projectcss.all, sty.border)}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"interactionEffect"}
                      data-plasmic-override={overrides.interactionEffect}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect
                      )}
                    />

                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wasjY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kJuFr
                        )}
                      >
                        <CircleIcon
                          className={classNames(projectcss.all, sty.svg__i7WPr)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__d2AV
                        )}
                      >
                        {"Start Now"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mh75P
                        )}
                      >
                        <ChevronDownIcon
                          className={classNames(projectcss.all, sty.svg__d2BrC)}
                          role={"img"}
                        />
                      </div>
                    </Stack__>
                  </BaseButton>
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__r5El0)}>
            <div
              data-plasmic-name={"footerTop"}
              data-plasmic-override={overrides.footerTop}
              className={classNames(projectcss.all, sty.footerTop)}
            >
              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <div className={classNames(projectcss.all, sty.columns___5Ojr)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__ldzht)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__qHwiT)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sTRjU
                      )}
                    >
                      {
                        "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s"
                      }
                    </div>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.column__aDqq5)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5___1NOqA
                      )}
                    >
                      {"Menu"}
                    </h5>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__yirHb
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Privacy Policy"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___02Fy
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Terms of Service"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__clAz
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Pricing "}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__xcjiv
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Contact"}
                    </PlasmicLink__>
                    <PlasmicLink__
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___72T6Q
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Blog"}
                    </PlasmicLink__>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__eP17U)}
                  >
                    <h5
                      className={classNames(
                        projectcss.all,
                        projectcss.h5,
                        projectcss.__wab_text,
                        sty.h5__duPyy
                      )}
                    >
                      {"Gallery"}
                    </h5>
                    <div
                      className={classNames(projectcss.all, sty.columns___25Pp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__pf1Zu
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__c7Sd)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/blog01390X290Jpg2.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__e62Qm
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___9NMK)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/blog4390X290Jpg2.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__vkekB
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tVzhA)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/blog2390X290Jpg2.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.columns__mgxhx)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___4W9Ys
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__u7M6E)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/blog01390X290Jpg2.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__iXuRa
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__tn4Bm)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/blog4390X290Jpg2.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__mWpWp
                        )}
                      >
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img___6FuKj)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/cms_starter/images/blog2390X290Jpg2.jpg",
                            fullWidth: 390,
                            fullHeight: 290,
                            aspectRatio: undefined
                          }}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"footerBottom"}
              data-plasmic-override={overrides.footerBottom}
              className={classNames(projectcss.all, sty.footerBottom)}
            >
              <div
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                className={classNames(projectcss.all, sty.container2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kreeo
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u00a9 Company Name. All rights reserved. This site proudly built with "
                      }
                    </React.Fragment>
                    {
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          projectcss.plasmic_default__inline,
                          sty.link__uddAv
                        )}
                        component={Link}
                        href={"https://www.plasmic.app/"}
                        platform={"nextjs"}
                      >
                        {"Plasmic"}
                      </PlasmicLink__>
                    }

                    <React.Fragment>{"."}</React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
          <Popover
            data-plasmic-name={"popover"}
            data-plasmic-override={overrides.popover}
            className={classNames("__wab_instance", sty.popover)}
            onOpenChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, ["popover", "isOpen"]).apply(
                null,
                eventArgs
              );
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />
        </Stack__>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "softBackground2",
    "border2",
    "interactionEffect2",
    "pageBanner",
    "h1",
    "features",
    "container4",
    "outerRow2",
    "row2",
    "softBackground3",
    "border3",
    "interactionEffect3",
    "container5",
    "outerRow3",
    "row4",
    "container6",
    "outerRow4",
    "row3",
    "softBackground4",
    "border4",
    "interactionEffect4",
    "softBackground",
    "border",
    "interactionEffect",
    "footerTop",
    "container",
    "footerBottom",
    "container2",
    "popover"
  ],

  softBackground2: ["softBackground2"],
  border2: ["border2"],
  interactionEffect2: ["interactionEffect2"],
  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  features: [
    "features",
    "container4",
    "outerRow2",
    "row2",
    "softBackground3",
    "border3",
    "interactionEffect3",
    "container5",
    "outerRow3",
    "row4",
    "container6",
    "outerRow4",
    "row3",
    "softBackground4",
    "border4",
    "interactionEffect4"
  ],

  container4: [
    "container4",
    "outerRow2",
    "row2",
    "softBackground3",
    "border3",
    "interactionEffect3"
  ],

  outerRow2: [
    "outerRow2",
    "row2",
    "softBackground3",
    "border3",
    "interactionEffect3"
  ],

  row2: ["row2", "softBackground3", "border3", "interactionEffect3"],
  softBackground3: ["softBackground3"],
  border3: ["border3"],
  interactionEffect3: ["interactionEffect3"],
  container5: ["container5", "outerRow3", "row4"],
  outerRow3: ["outerRow3", "row4"],
  row4: ["row4"],
  container6: [
    "container6",
    "outerRow4",
    "row3",
    "softBackground4",
    "border4",
    "interactionEffect4"
  ],

  outerRow4: [
    "outerRow4",
    "row3",
    "softBackground4",
    "border4",
    "interactionEffect4"
  ],

  row3: ["row3", "softBackground4", "border4", "interactionEffect4"],
  softBackground4: ["softBackground4"],
  border4: ["border4"],
  interactionEffect4: ["interactionEffect4"],
  softBackground: ["softBackground"],
  border: ["border"],
  interactionEffect: ["interactionEffect"],
  footerTop: ["footerTop", "container"],
  container: ["container"],
  footerBottom: ["footerBottom", "container2"],
  container2: ["container2"],
  popover: ["popover"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    softBackground2: makeNodeComponent("softBackground2"),
    border2: makeNodeComponent("border2"),
    interactionEffect2: makeNodeComponent("interactionEffect2"),
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    features: makeNodeComponent("features"),
    container4: makeNodeComponent("container4"),
    outerRow2: makeNodeComponent("outerRow2"),
    row2: makeNodeComponent("row2"),
    softBackground3: makeNodeComponent("softBackground3"),
    border3: makeNodeComponent("border3"),
    interactionEffect3: makeNodeComponent("interactionEffect3"),
    container5: makeNodeComponent("container5"),
    outerRow3: makeNodeComponent("outerRow3"),
    row4: makeNodeComponent("row4"),
    container6: makeNodeComponent("container6"),
    outerRow4: makeNodeComponent("outerRow4"),
    row3: makeNodeComponent("row3"),
    softBackground4: makeNodeComponent("softBackground4"),
    border4: makeNodeComponent("border4"),
    interactionEffect4: makeNodeComponent("interactionEffect4"),
    softBackground: makeNodeComponent("softBackground"),
    border: makeNodeComponent("border"),
    interactionEffect: makeNodeComponent("interactionEffect"),
    footerTop: makeNodeComponent("footerTop"),
    container: makeNodeComponent("container"),
    footerBottom: makeNodeComponent("footerBottom"),
    container2: makeNodeComponent("container2"),
    popover: makeNodeComponent("popover"),
    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
