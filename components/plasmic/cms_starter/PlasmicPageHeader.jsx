// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: eNceDkVszvmjFS7wKy9BUq
// Component: gW9zCTHcS85j
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import CheckboxGroup from "../../CheckboxGroup"; // plasmic-import: 3-lkUPAuNPl5/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: eNceDkVszvmjFS7wKy9BUq/projectcss
import sty from "./PlasmicPageHeader.module.css"; // plasmic-import: gW9zCTHcS85j/css

createPlasmicElementProxy;

export const PlasmicPageHeader__VariantProps = new Array();

export const PlasmicPageHeader__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPageHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "checkboxGroup.value",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option1.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option2.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "option3.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <h1
          data-plasmic-name={"h1"}
          data-plasmic-override={overrides.h1}
          className={classNames(
            projectcss.all,
            projectcss.h1,
            projectcss.__wab_text,
            sty.h1
          )}
        >
          {"Hello World Header!"}
        </h1>
      </div>
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Hello World Text!"}
      </div>
      <CheckboxGroup
        data-plasmic-name={"checkboxGroup"}
        data-plasmic-override={overrides.checkboxGroup}
        className={classNames("__wab_instance", sty.checkboxGroup)}
        onChange={async (...eventArgs) => {
          generateStateOnChangeProp($state, ["checkboxGroup", "value"]).apply(
            null,
            eventArgs
          );
          if (
            eventArgs.length > 1 &&
            eventArgs[1] &&
            eventArgs[1]._plasmic_state_init_
          ) {
            return;
          }
        }}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h1", "text", "checkboxGroup"],
  freeBox: ["freeBox", "h1"],
  h1: ["h1"],
  text: ["text"],
  checkboxGroup: ["checkboxGroup"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicPageHeader__ArgProps,
          internalVariantPropNames: PlasmicPageHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPageHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPageHeader";
  } else {
    func.displayName = `PlasmicPageHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicPageHeader = Object.assign(
  // Top-level PlasmicPageHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h1: makeNodeComponent("h1"),
    text: makeNodeComponent("text"),
    checkboxGroup: makeNodeComponent("checkboxGroup"),
    // Metadata about props expected for PlasmicPageHeader
    internalVariantProps: PlasmicPageHeader__VariantProps,
    internalArgProps: PlasmicPageHeader__ArgProps
  }
);

export default PlasmicPageHeader;
/* prettier-ignore-end */
